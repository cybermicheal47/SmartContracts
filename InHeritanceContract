pragma solidity ^0.5.7;


contract Will {
    address owner;
    uint    fortune;
    bool    deceased;
    
    constructor() payable public {
        owner = msg.sender; // msg sender represents adress that is being called
        fortune = msg.value; //msg value tells us how much ether is being sent  
        deceased = false;
    }
    
    //create modifier so only person who can call the contract is the owner 
    
    modifier onlyOwner {
        require(msg.sender ==owner);
        _;
    }
    //create modifier so that we can ponly allocate funds if friend's gramps deceased 
    
      modifier mustBeDeceased {
        require(deceased ==true);
        _;
    }
    
   //list of family wallets 
 address payable [] familyWallets;
 
 // map or loop through inheritance
 mapping(address => uint)inheritance;
 
 
 //set inheritance for each address
 
 
 function setInheritance(address payable wallet, uint amount) public onlyOwner {
    familyWallets.push(wallet);
    inheritance[wallet] = amount;
 }
 
 
 
 
 
 
 
 //pay family memebers base on their wallet address 
 
 function payout() private mustBeDeceased {
     for(uint i=0; i<familyWallets.length; i++) {    //transfer the funds from contract address to  reciever address 
         familyWallets[i].transfer(inheritance[familyWallets[i]]);
     }
 }
 
 
 //oracle switch stimulation
 function hasDeceased() public onlyOwner{
    deceased = true;
     payout();
     
 }
 
 
}
